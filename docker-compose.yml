version: "3.8"

x-env: &default-env
  TZ: UTC

services:
  # Redpanda (Kafka-compatible streaming)
  redpanda:
    image: redpandadata/redpanda:latest
    command:
      - redpanda start --overprovisioned --smp 1 --memory 1G --reserve-memory 0M --check=false --node-id 0
      - --kafka-addr internal://0.0.0.0:9092,external://0.0.0.0:19092
      - --advertise-kafka-addr internal://redpanda:9092,external://localhost:19092
      - --pandaproxy-addr internal://0.0.0.0:8082,external://0.0.0.0:18082
      - --advertise-pandaproxy-addr internal://redpanda:8082,external://localhost:18082
      - --schema-registry-addr internal://0.0.0.0:8081,external://0.0.0.0:18081
      - --rpc-addr redpanda:33145
      - --advertise-rpc-addr redpanda:33145
    ports:
      - "19092:19092"
      - "18081:18081"
      - "18082:18082"
      - "9644:9644"
    environment:
      <<: *default-env

  # Redpanda Console for debugging
  redpanda-console:
    image: redpandadata/console:latest
    depends_on: [redpanda]
    ports:
      - "8080:8080"
    environment:
      CONFIG_FILEPATH: /tmp/config.yml
      CONSOLE_CONFIG_FILE: |
        kafka:
          brokers: ["redpanda:9092"]
        redpanda:
          adminApi:
            enabled: true
            urls: ["http://redpanda:9644"]
    command: ["/bin/sh","-c","echo \"$CONSOLE_CONFIG_FILE\" > /tmp/config.yml; /app/console"]

  # MinIO for object storage
  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
      <<: *default-env
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # MinIO client for bucket creation
  minio-init:
    image: minio/mc:latest
    depends_on:
      minio:
        condition: service_healthy
    environment:
      <<: *default-env
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set myminio http://minio:9000 minioadmin minioadmin;
      /usr/bin/mc mb myminio/surveillance-bucket;
      /usr/bin/mc policy set public myminio/surveillance-bucket;
      exit 0;
      "

  # PostgreSQL database
  postgres:
    image: postgres:15
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: svc
      POSTGRES_PASSWORD: svcpass
      POSTGRES_DB: surveillance_db
      <<: *default-env
    volumes:
      - postgres_data:/var/lib/postgresql/data

  # etcd for Milvus
  etcd:
    image: quay.io/coreos/etcd:v3.5.7
    command: >
      etcd -advertise-client-urls http://0.0.0.0:2379
           -listen-client-urls http://0.0.0.0:2379
           -data-dir /etcd
    ports:
      - "2379:2379"
    environment:
      <<: *default-env
    volumes:
      - etcd_data:/etcd

  # Milvus vector database
  milvus:
    image: milvusdb/milvus:v2.2.13
    command: ["milvus", "run", "standalone"]
    environment:
      ETCD_ENDPOINTS: etcd:2379
      MINIO_ADDRESS: minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
      <<: *default-env
    depends_on: 
      - etcd
      - minio
    ports:
      - "19530:19530"
      - "9091:9091"
    volumes:
      - milvus_data:/var/lib/milvus

  # Nginx for HLS streaming
  nginx:
    image: nginx:alpine
    ports:
      - "8088:80"
    volumes:
      - hls_data:/usr/share/nginx/html/hls
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - api

  # API Service
  api:
    build: ./api
    depends_on: 
      - postgres
      - milvus
      - minio
      - redpanda
    environment:
      DATABASE_URL: postgresql+psycopg2://svc:svcpass@postgres:5432/surveillance_db
      KAFKA_BOOTSTRAP: redpanda:9092
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
      MILVUS_HOST: milvus
      MILVUS_PORT: 19530
      JWT_SECRET: devsecret123
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      <<: *default-env
    ports:
      - "8000:8000"
    volumes:
      - hls_data:/app/hls

  # Edge Agent Service
  edge-agent:
    build: ./edge-agent
    depends_on: 
      - redpanda
      - minio
      - milvus
      - api
    environment:
      VIDEO_DIR: /data/videos
      CHUNK_SECONDS: 10
      REDPANDA_BOOTSTRAP: redpanda:9092
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
      MILVUS_HOST: milvus
      MILVUS_PORT: 19530
      HLS_OUT_DIR: /hls
      <<: *default-env
    volumes:
      - ./video-samples:/data/videos:ro
      - hls_data:/hls
    # Uncomment for GPU support
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: nvidia
    #           count: 1
    #           capabilities: [gpu]

volumes:
  minio_data:
  postgres_data:
  milvus_data:
  etcd_data:
  hls_data: